apiVersion: v1
kind: ConfigMap
metadata:
  name: library-frontend-configs
  namespace: zim
data:
  # not really secret, not exposing port outside
  secret.txt: |
    varnishadmin
  entrypoint.sh: |
    #!/bin/sh
    extra_opts=""
    if [ -z "$VARNISHSIZE" ]; then
      # WARN: uses at least double that amount
      VARNISHSIZE=384M
    fi

    if [ ! -z "$VARNISH_SECRET_PATH" ]; then
      extra_opts="${extra_opts} -S $VARNISH_SECRET_PATH"
    fi

    if [ ! -z "$VARNISH_ADMIN_IP" ]; then
      extra_opts="${extra_opts} -T $VARNISH_ADMIN_IP:6082"
    fi

    if [ -z "$VARNISH_LOG" ]; then
      VARNISH_LOG="/dev/stdout"
    fi

    function varnishncsa_after_varnishd {
      echo "Awaiting varnishd startup "
      while :
      do
        if [ -f /var/run/varnishd.pid ] ; then
          echo ""
          break
        fi
        echo -n "."
        sleep 1
      done
      echo "Varnishd running at PID=$(cat /var/run/varnishd.pid)."

      echo "Starting varnishncsa to record logs to $VARNISH_LOG"
      varnishncsa -D -P /var/run/varnishncsa.pid -c -a -F '%{Host}i %{X-Forwarded-For}i - %u %t "%r" %s %b "%{Referer}i" "%{User-agent}i"' -q 'ReqURL ~ "^/catalog/"' -w $VARNISH_LOG
    }

    varnishncsa_after_varnishd &

    echo "Starting varnish with ${extra_opts}"

    exec varnishd -P /var/run/varnishd.pid -F -a http=:80,HTTP -p feature=+http2 -f /etc/varnish/default.vcl -s default,$VARNISHSIZE $extra_opts
  varnish.vcl: |
    vcl 4.1;

    import std;
    import dynamic;

    # ACL for manual purge requests
    acl purge {
      "localhost";
      "100.64.0.0"/16; // k8s cluster
    }

    # catalog backend for OPDS
    backend catalog {
        .host = "library-catalog-backend-service";
        .port = "80";
    }

    sub vcl_recv {

      if (req.method == "PURGE") {
        if (!client.ip ~ purge) {
          return(synth(403, "Not allowed."));
        }

        # Purge library
        # curl -X PURGE -H "X-Purge-Type: library" localhost
        if (req.http.X-Purge-Type == "library") {
          if (std.ban("req.url ~ ^/catalog/v2/root.xml$") &&
              std.ban("req.url ~ ^/catalog/v2/entries") &&
              std.ban("req.url ~ ^/catalog/v2/partial_entries") &&
              std.ban("req.url ~ ^/catalog/v2/categories") &&
              std.ban("req.url ~ ^/catalog/v2/languages") &&
              std.ban("req.url ~ ^/catalog/v2/search") &&
              std.ban("req.url ~ ^/catalog/root.xml$") &&
              std.ban("req.url ~ ^/catalog/search")) {
            return(synth(200, "Purged Library endpoints"));
          } else {
            # return ban error in 400 response
            return(synth(400, std.ban_error()));
          }
        }

        # Purge for a single Book references with http.X-Book-Id AND req.http.X-Book-Name
        # curl -X PURGE -H "X-Purge-Type: book" -H "X-Book-Id: uuid" -H "X-Book-Name: name" -H "X-Book-Name-Nodate: " localhost
        if (req.http.X-Purge-Type == "book") {
          if (
              # metadata updates
              std.ban("req.url ~ ^/catalog/v2/entry/" + req.http.X-Book-Id) &&
              std.ban("req.url ~ ^/catalog/v2/illustration/" + req.http.X-Book-Id + "/") &&

              # should never change; but can if we redo same ZIM or was 404 before or became 404
              std.ban("req.url ~ ^/raw/" + req.http.X-Book-Name + "/(meta|content)/") &&
              std.ban("req.url ~ ^/content/" + req.http.X-Book-Name) &&

              # may change if kiwix-serve updates search algo/template
              # purging in case ZIM has been updated (should not)
              std.ban("req.url ~ ^/search?content=" + req.http.X-Book-Name + "&") &&

              # may change if kiwix-serve updates suggest algo/template
              # purging in case ZIM has been updated (should not)
              std.ban("req.url ~ ^/suggest?content=" + req.http.X-Book-Name + "&") &&

              # redirects to /content/ (not purging)
              # std.ban("req.url ~ ^/" + req.http.X-Book-Name + "/?$") &&

              # no-date must be purged as redirect may point to a new location
              std.ban("req.url ~ ^/" + req.http.X-Book-Name-Nodate + "/?$") &&
              std.ban("req.url ~ ^/content/" + req.http.X-Book-Name-Nodate + "/?$")) {
            return(synth(200, "Purged Book endpoints"));
          } else {
            # return ban error in 400 response
            return(synth(400, std.ban_error()));
          }
        }

        # curl -X PURGE -H "X-Purge-Type: kiwix-serve" localhost
        if (req.http.X-Purge-Type == "kiwix-serve") {
          if (std.ban("req.url ~ ^/catalog/v2/searchdescription.xml$") &&
              std.ban("req.url ~ ^/skin/") &&
              std.ban("req.url ~ ^/viewer") &&
              std.ban("req.url ~ ^/catalog/searchdescription.xml$") &&
              std.ban("req.url ~ ^/search/searchdescription.xml$") &&
              std.ban("req.url ~ ^/catch/external") &&
              std.ban("req.url ~ ^/$")) {
            return(synth(200, "Purged kiwix-serve endpoints"));
          } else {
            # return ban error in 400 response
            return(synth(400, std.ban_error()));
          }
        }

        return(synth(204, "Missing valid X-Purge-Type"));
      }

      # we only serve /catalog/
      if (req.url ~ "^/catalog/") {
          set req.backend_hint = catalog;
      } else {
          return(synth(404, "Not found."));
      }

      # remove potential cookie from request (there should be none)
      unset req.http.cookie;

      # set standard proxied ip header for getting original remote address
      # set req.http.X-Forwarded-For = client.ip;
      set req.http.X-Forwarded-For = req.http.x-real-ip;

      # Kiwix-serve 3.4.0 endpoints described at:
      # https://github.com/kiwix/kiwix-tools/issues/498#issuecomment-1337309380

      # library-refresh is triggered by a RESET call initied after our library-refresh script
      # kiwix-serve version change is triggered by a UPDATE call initied on container restart
      # book expiration is triggered by BAN calls for updated/new books after library-refresh script

      # let's cache everything except /random.
      # all endpoints listed above
      if (req.url !~ "^/random") {
          return(hash);
      }

      # default to not caching (to save space)
      return (pass);
    }

    sub vcl_backend_response {

      # make sure to not cache backend errors
      if (beresp.status >= 500 && bereq.is_bgfetch) {
          return (abandon);
      }

      # set ttl to 1d for everything that's returned by backends
      set beresp.ttl = 1d;
      # set beresp.grace = 24h;
      # set beresp.keep = 8m;

      # important for it to go to cache
      unset bereq.http.cookie;
      return (deliver);

    }
  index.html: |
    <!DOCTYPE html>
    <html xmlns="http://www.w3.org/1999/xhtml">
    <head>
      <meta charset="UTF-8" />
      <meta name="viewport" content="width=device-width,initial-scale=1" />
      <title>Kiwix Library</title>
      <link rel="apple-touch-icon" sizes="180x180" href="https://browse.library.kiwix.org/skin/favicon/apple-touch-icon.png?14.0.0">
      <link rel="icon" type="image/png" sizes="32x32" href="https://browse.library.kiwix.org/skin/favicon/favicon-32x32.png?14.0.0">
      <link rel="icon" type="image/png" sizes="16x16" href="https://browse.library.kiwix.org/skin/favicon/favicon-16x16.png?14.0.0">
      <link rel="manifest" href="https://browse.library.kiwix.org/skin/favicon/site.webmanifest?14.0.0">
      <link rel="mask-icon" href="https://browse.library.kiwix.org/skin/favicon/safari-pinned-tab.svg?14.0.0" color="#5bbad5">
      <link rel="shortcut icon" href="https://browse.library.kiwix.org/skin/favicon/favicon.ico?14.0.0">
      <meta name="msapplication-TileColor" content="#da532c">
      <meta name="msapplication-config" content="/skin/favicon/browserconfig.xml?14.0.0">
      <meta name="theme-color" content="#ffffff">
      <style type="text/css">* { margin: 0; padding:0; } body { width: 100vw; height: 100vh; } iframe { border: 0; width: 100vw; height: 100vh; }</style>
    </head>
    <body>
      <script type="text/javascript">
        // mandatory. also set on browse.library's kiwix-serve templates.
        // allows communication between those two origins on same upper-level domain
        // required to read changes to URL
        document.domain = "library.kiwix.org";
        const topRoot = `${window.location.origin}/`;
        const targetRoot = "https://browse.library.kiwix.org/";
        var iframe;
        var isSetup = false;

        /* called when URL changes inside the iframe
           for instance whenever a filter is used, the URL's fragments are updated
           we thus replicate such fragment changes to _top URL.
           supports paths changes but we should not have those in home.
        */
        function onIframeUrlChanged(url) {
          if (url.pathname == window.location.pathname && url.hash == window.location.hash) {
            console.log('onIframeUrlChanged() same URL');
            return;
          }

          console.debug('iframe URL changed', url);
          if (url.pathname != window.location.pathname) {
            let target = url.href.replace(targetRoot, "/");
            console.debug(".. different paths, changing whole URL:", target);
            window.location.replace(target);
            return;
          }
          window.location.hash = url.hash;
        }

        /* called when URL changes in _top URL (main window)
           for instance whenever user manually updates the URL, to change filters.
           we thus replicate such fragment changes to iframe URL.
           supports paths changes but we should not have those in home since
           the server already redirects everything not /
        */
        function onTopUrlChanged(url) {
          if (isSetup && url.pathname == iframe.contentWindow.pathname && url.hash == iframe.contentWindow.hash) {
            console.log('onTopUrlChanged() same URL');
            return;
          }

          console.debug('___top URL changed', url);

          if (url.pathname != iframe.contentWindow.location.pathname) {
            let target = url.href.replace(topRoot, targetRoot);
            console.debug("changing whole path to:", target);
            iframe.contentWindow.location.replace(target);
            return;
          }
          iframe.contentWindow.location.hash = url.hash;
        }

        /* reliably registers a `toplocationchange` Event when URL changes in window
           registers a handler for this event
        */
        function setupTopURLChangeWatcher() {
          console.debug("setupTopURLChangeWatcher()");
          var pushState = window.history.pushState;
          var replaceState = window.history.replaceState;
          window.history.pushState = function() {
              pushState.apply(window.history, arguments);
              window.dispatchEvent(new Event('pushstate'));
              window.dispatchEvent(new Event('toplocationchange'));
          };
          window.history.replaceState = function() {
              replaceState.apply(window.history, arguments);
              window.dispatchEvent(new Event('replacestate'));
              window.dispatchEvent(new Event('toplocationchange'));
          };
          window.addEventListener('popstate', function() {
              window.dispatchEvent(new Event('toplocationchange'))
          });

          window.addEventListener('toplocationchange', function(){
            onTopUrlChanged(window.location);
          });
        }

        /* reliably registers an `iframelocationchange` Event when URL changes in iframe
           registers a handler for this event
           but first removes handler should it exist given every `load` requires
           re-registering event and would otherwise pollutes the stack with handlers
        */
        function setupIframeURLChangeWatcher() {
          console.debug("setupIframeURLChangeWatcher()");
          var pushState = iframe.contentWindow.history.pushState;
          var replaceState = iframe.contentWindow.history.replaceState;
          iframe.contentWindow.history.pushState = function() {
              pushState.apply(iframe.contentWindow.history, arguments);
              window.dispatchEvent(new Event('pushstate'));
              window.dispatchEvent(new Event('iframelocationchange'));
          };
          iframe.contentWindow.history.replaceState = function() {
              replaceState.apply(iframe.contentWindow.history, arguments);
              window.dispatchEvent(new Event('replacestate'));
              window.dispatchEvent(new Event('iframelocationchange'));
          };
          window.addEventListener('popstate', function() {
              window.dispatchEvent(new Event('iframelocationchange'))
          });

          function onIframeUrlChangedEvent(){
            onIframeUrlChanged(iframe.contentWindow.location);
          }

          // clear up previously registered event
          window.removeEventListener('iframelocationchange', onIframeUrlChangedEvent);
          window.addEventListener('iframelocationchange', onIframeUrlChangedEvent);
        }

        document.addEventListener('DOMContentLoaded', function(){
          // register once to top URL changes
          setupTopURLChangeWatcher();

          // get a hold of iframe and register URL change events
          iframe = document.getElementById("browse_iframe");
          // register URL change events on every `load`
          iframe.addEventListener('load', function(ev) {
            console.debug('iframe load event', iframe.contentWindow.location, ev)
            // register iframe URL events
            setupIframeURLChangeWatcher();
          });
          // call URL change event once to trigger iframe load
          onTopUrlChanged(window.location);
          isSetup = true;
        });
      </script>
      <iframe id="browse_iframe"></iframe>
      </body>
    </html>
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: zim
  labels:
    app: library-frontend-app
  name: library-frontend-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: library-frontend-app
  template:
    metadata:
      labels:
        app: library-frontend-app
    spec:
      securityContext:
        runAsUser: 0
        runAsGroup: 0
      containers:
      - image: docker.io/library/varnish:7.3-alpine
        # command: ["varnishd", "-F", "-a", "http=:80,HTTP", "-p", "feature=+http2", "-f", "/etc/varnish/default.vcl", "-s", "malloc,384M"]
        command: ["entrypoint"]
        imagePullPolicy: IfNotPresent
        name: varnish
        env:
        - name: VARNISHSIZE
          value: "1G"
        - name: VARNISH_SECRET_PATH
          value: /etc/varnish/secret
        - name: VARNISH_ADMIN_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: VARNISH_LOG
          value: "/data/logs/access.log"
        ports:
        - containerPort: 80
        - containerPort: 6082
        volumeMounts:
        - name: configs
          mountPath: "/usr/sbin/entrypoint"
          subPath: entrypoint.sh
          readOnly: true
        - name: configs
          mountPath: "/etc/varnish/secret"
          subPath: secret.txt
          readOnly: true
        - name: configs
          mountPath: "/etc/varnish/default.vcl"
          subPath: varnish.vcl
          readOnly: true
        - mountPath: "/data/logs"
          subPath: library-kiwix
          name: nginx-logs-volume
          readOnly: false
        resources:
          requests:
            memory: "4Gi"
            cpu: "30m"
      volumes:
      - name: configs
        configMap:
          name: library-frontend-configs
          defaultMode: 0755
      - name: nginx-logs-volume
        persistentVolumeClaim:
          claimName: nginx-logs-pvc
      nodeSelector:
        k8s.kiwix.org/role: "storage"
---
apiVersion: v1
kind: Service
metadata:
  namespace: zim
  name: library-frontend-service
  labels:
    app: library-frontend-app
spec:
  selector:
    app: library-frontend-app
  ports:
  - name: http
    protocol: TCP
    port: 80
    targetPort: 80
  - name: varnishadm
    protocol: TCP
    port: 6082
    targetPort: 6082
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: zim
  labels:
    app: library-frontend-root-app
  name: library-frontend-root-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: library-frontend-root-app
  template:
    metadata:
      labels:
        app: library-frontend-root-app
    spec:
      containers:
      - image: docker.io/nginx:1.21
        imagePullPolicy: IfNotPresent
        name: nginx
        ports:
        - containerPort: 80
        volumeMounts:
        - mountPath: "/usr/share/nginx/html/index.html"
          name: files-volume
          subPath: index.html
          readOnly: true
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
      volumes:
      - name: files-volume
        configMap:
          name: library-frontend-configs
      nodeSelector:
        k8s.kiwix.org/role: "storage"
---
apiVersion: v1
kind: Service
metadata:
  namespace: zim
  name: library-frontend-root-service
  labels:
    app: library-frontend-root-app
spec:
  selector:
    app: library-frontend-root-app
  ports:
  - protocol: TCP
    port: 80
    name: http
    targetPort: 80
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: library-frontend-ingress
  namespace: zim
  annotations:
    nginx.ingress.kubernetes.io/server-snippet: |
        location /robots.txt {
          add_header Content-Type "text/plain";
          return 200 "User-agent: *\nDisallow: /";
        }

        # redirect all requests not for the catalog to browse.library
        set $demoFlag 0;
        if ($uri !~* "^/catalog/" ){
          set $demoFlag 1;
        }
        # prevent redirect on / (will be handled by location from ingress path)
        if ($uri = "/") {
          set $demoFlag 0;
        }

        if ($uri ~* "/.well-known/acme-challenge/(.+)") {
          set $demoFlag 0;
        }

        if ( $demoFlag = 1 ) {
          rewrite ^/(.*) https://browse.library.kiwix.org/$1 permanent;
          return 301 "https://browse.library.kiwix.org/";
        }

        add_header Access-Control-Allow-Origin "*" always;

        # Other CORS headers
        add_header Access-Control-Allow-Methods "GET, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Content-Type, Authorization" always;
        add_header Access-Control-Allow-Credentials "true" always;

        # Frame ancestors for both sites
        add_header Content-Security-Policy "frame-ancestors 'self' https://browser-extension.kiwix.org https://pwa.kiwix.org" always;

        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            return 204;
        }
spec:
  ingressClassName: nginx
  tls:
    - hosts:
      - library.kiwix.org
      secretName: library-kiwix-org-tls
  rules:
  - host: library.kiwix.org
    http:
      paths:
      - path: /
        pathType: Exact
        backend:
          service:
            name: library-frontend-root-service
            port:
              name: http
      - path: /
        pathType: Prefix
        backend:
          service:
            name: library-frontend-service
            port:
              name: http
